<?xml version="1.0" encoding="utf-8"?>
<!--
	The MIT License (MIT)

	Copyright (c) 2015 Mobile Essentials

	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:

	The above copyright notice and this permission notice shall be included in all
	copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
	SOFTWARE.
-->
<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
	<Import Project="MSBuilder.VsixDependency.tasks" />

	<!-- Only auto-install dependencies if the extension being built will be deployed too -->
	<PropertyGroup>
		<Dev Condition="'$(Dev)' == ''">$(VisualStudioVersion)</Dev>
		<DevDir Condition="'$(DevDir)' == ''">$(VsInstallRoot)</DevDir>
		<DeployVsixExtensionFilesDependsOn>
			_CleanInstallVsixDependencies;
			_CollectVsixPayloads;
			_ExperimentalizeVsixPayloads;
			InstallVsixDependencies;
			$(DeployVsixExtensionFilesDependsOn)
		</DeployVsixExtensionFilesDependsOn>
	</PropertyGroup>

	<!-- Install only once per VS + Instance, to enable incremental build -->
	<Target Name="InstallVsixDependencies"
			Condition=" '$(DeployExtension)' == 'true' And '@(VsixDependency)' != '' And '$(InstallVsixDependencies)' != 'false' "
			DependsOnTargets="_CollectVsixPayloads;_ExperimentalizeVsixPayloads"
			Inputs="@(VsixPayload)"
			Outputs="$(IntermediateOutputPath)InstallVsixDependencies-$(Dev)$(RootSuffix).txt">

		<InstallVsix VisualStudioVersion="$(Dev)"
						 VsInstallRoot="$(DevDir)"
						 VsixPath="%(VsixPayload.Exp)"
						 MessageImportance="high"
						 RootSuffix="$(RootSuffix)" />
		
		<MakeDir Directories="$(IntermediateOutputPath)" Condition=" !Exists('$(IntermediateOutputPath)') " />
		<Touch Files="$(IntermediateOutputPath)InstallVsixDependencies-$(Dev)$(RootSuffix).txt" AlwaysCreate="true" />
		<ItemGroup>
			<FileWrites Include="$(IntermediateOutputPath)InstallVsixDependencies-$(Dev)$(RootSuffix).txt" />
		</ItemGroup>
	</Target>

	<!-- Injects the @VsixDependency into the intermediate VSIX manifest -->
	<Target Name="_AddVsixDependencies"
			  Condition=" '@(VsixDependency)' != '' and Exists('$(IntermediateVsixManifest)') and '$(AddVsixDependencies)' != 'false' "
			  AfterTargets="DetokenizeVsixManifestFile"
			  Inputs="$(IntermediateVsixManifest)"
			  Outputs="$(IntermediateOutputPath)AddVsixDependencies.txt">

		<ItemGroup>
			<Content Include="%(VsixDependency.VsixPath)">
				<Link>%(Filename)%(Extension)</Link>
				<CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
				<IncludeInVsix>true</IncludeInVsix>
			</Content>
		</ItemGroup>

		<AddVsixDependency TargetVsixManifest="$(IntermediateVsixManifest)"
				   VsixDependencyManifest="@(VsixDependency)" />

		<MakeDir Directories="$(IntermediateOutputPath)" Condition=" !Exists('$(IntermediateOutputPath)') " />
		<Touch Files="$(IntermediateOutputPath)AddVsixDependencies.txt" AlwaysCreate="true" />
	</Target>

	<!-- If the entire Extensions folder doesn't exist, most likely the dev deleted the entire Exp directory -->
	<Target Name="_CleanInstallVsixDependencies"
			  Condition=" Exists('$(IntermediateOutputPath)InstallVsixDependencies-$(Dev)$(RootSuffix).txt') ">
		
		<GetExtensionsPath 
			Condition="'$(ExtensionsPath)' == '' And '$(Dev)' &gt;= '15.0'"
			RootSuffix="$(VSSDKTargetPlatformRegRootSuffix)" >
		  <Output TaskParameter="LocalExtensionsPath" PropertyName="ExtensionsPath"/>
		</GetExtensionsPath>
		
		<GetExtensionsPath 
			Condition="'$(ExtensionsPath)' == '' And '$(Dev)' &lt; '15.0'"
			SubPath="$(ExtensionsDeploymentSubPath)">
			<Output TaskParameter="LocalExtensionsPath" PropertyName="ExtensionsPath"/>
		</GetExtensionsPath>
		
		<Delete Files="$(IntermediateOutputPath)InstallVsixDependencies-$(Dev)$(RootSuffix).txt"
					Condition=" !Exists('$(ExtensionsPath)') " />
	</Target>

	<Target Name="_CollectVsixPayloads">
		<ItemGroup>
			<VsixPayload Include="@(VsixDependency -> '%(VsixPath)')" />
			<VsixPayload>
				<Exp>%(RootDir)%(Directory)%(Filename)-exp%(Extension)</Exp>
			</VsixPayload>
		</ItemGroup>
	</Target>

	<Target Name="_ExperimentalizeVsixPayloads"
			Condition=" '$(DeployExtension)' == 'true' And '@(VsixDependency)' != '' and '$(InstallVsixDependencies)' != 'false' "
			DependsOnTargets="_CollectVsixPayloads"
			Inputs="@(VsixPayload)"
			Outputs="@(VsixPayload -> '%(Exp)')">

		<!-- Run the "Experimentalizer" which turns release VSIXes into Experimental ones -->
		<Exec Command='"$(VsixExp)" "@(VsixPayload)" "%(VsixPayload.Exp)"' />
	</Target>

</Project>
