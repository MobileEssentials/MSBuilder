<?xml version="1.0" encoding="utf-8"?>
<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
	<!--
	==============================================================
					Retrieves and exposes VSIX information
			
	If the importing project has a C# or VB Language property, 
	by default a ThisAssembly file/class will be generated 
	containing assembly-level metadata for the VSIX information
	(Identifier, Name and Version), as well as a ThisAssembly.Vsix
	static class with constants for all the available values.
	
	Customization:
	
	$(ThisAssemblyNamespace): allows overriding the namespace
								for the ThisAssembly class.
								Defaults to the global namespace.
				
	==============================================================
	-->

	<!-- You can customize the namespace of the ThisAssembly class by setting the ThisAssemblyNamespace property. -->
	<PropertyGroup Condition="'$(Language)' == 'C#' Or '$(Language)' == 'VB'">
		<CoreCompileDependsOn>
			FindSourceVsixManifest;
			EnsureSourceVsixManifest;
			VsixThisAssembly;
			$(CoreCompileDependsOn)
		</CoreCompileDependsOn>
		<ThisVsixInfoFile>$(IntermediateOutputPath)ThisAssembly.Vsix.g$(DefaultLanguageSourceExtension)</ThisVsixInfoFile>
		<Vsix2011>&lt;Namespace Prefix='vs' Uri='http://schemas.microsoft.com/developer/vsx-schema/2011'/&gt;</Vsix2011>
		<Vsix2010>&lt;Namespace Prefix='vs' Uri='http://schemas.microsoft.com/developer/vsx-schema/2010'/&gt;</Vsix2010>
	</PropertyGroup>

	<Target Name="EnsureSourceVsixManifest" Condition="'@(SourceVsixManifest)' == ''">
		<!-- Under VSSDK 15.0+, the FindSourceVsixManifest target is not run unless '$(CreateVsixContainer)' == 'true' -->
		<FindVsixManifest ItemsToConsider="@(None)"
							ProjectName="$(MSBuildProjectName)">
			<Output TaskParameter="VsixManifest" ItemName="SourceVsixManifest"/>
		</FindVsixManifest>
	</Target>
	
	<Target Name="VsixInfo" AfterTargets="DetokenizeVsixManifestFile" Condition="Exists('$(IntermediateVsixManifest)')">
		<XmlPeek Condition="'$(VsixID)' == ''" Namespaces="$(Vsix2010)" XmlInputPath="$(IntermediateVsixManifest)" Query="/vs:Vsix/vs:Identifier/@Id">
			<Output TaskParameter="Result" PropertyName="VsixID" />
		</XmlPeek>
		<XmlPeek Condition="'$(VsixID)' == ''" Namespaces="$(Vsix2011)" XmlInputPath="$(IntermediateVsixManifest)" Query="/vs:PackageManifest/vs:Metadata/vs:Identity/@Id">
			<Output TaskParameter="Result" PropertyName="VsixID" />
		</XmlPeek>

		<XmlPeek Condition="'$(VsixVersion)' == ''" Namespaces="$(Vsix2010)" XmlInputPath="$(IntermediateVsixManifest)" Query="/vs:Vsix/vs:Identifier/@Version">
			<Output TaskParameter="Result" PropertyName="VsixVersion" />
		</XmlPeek>
		<XmlPeek Condition="'$(VsixVersion)' == ''" Namespaces="$(Vsix2011)" XmlInputPath="$(IntermediateVsixManifest)" Query="/vs:PackageManifest/vs:Metadata/vs:Identity/@Version">
			<Output TaskParameter="Result" PropertyName="VsixVersion" />
		</XmlPeek>

		<XmlPeek Condition="'$(VsixName)' == ''" Namespaces="$(Vsix2010)" XmlInputPath="$(IntermediateVsixManifest)" Query="/vs:Vsix/vs:Identifier/vs:Name/text()">
			<Output TaskParameter="Result" PropertyName="VsixName" />
		</XmlPeek>
		<XmlPeek Condition="'$(VsixName)' == ''" Namespaces="$(Vsix2011)" XmlInputPath="$(IntermediateVsixManifest)" Query="/vs:PackageManifest/vs:Metadata/vs:DisplayName/text()">
			<Output TaskParameter="Result" PropertyName="VsixName" />
		</XmlPeek>

		<XmlPeek Condition="'$(VsixDescription)' == ''" Namespaces="$(Vsix2010)" XmlInputPath="$(IntermediateVsixManifest)" Query="/vs:Vsix/vs:Identifier/vs:Description/text()">
			<Output TaskParameter="Result" PropertyName="VsixDescription" />
		</XmlPeek>
		<XmlPeek Condition="'$(VsixDescription)' == ''" Namespaces="$(Vsix2011)" XmlInputPath="$(IntermediateVsixManifest)" Query="/vs:PackageManifest/vs:Metadata/vs:Description/text()">
			<Output TaskParameter="Result" PropertyName="VsixDescription" />
		</XmlPeek>

		<XmlPeek Condition="'$(VsixAuthor)' == ''" Namespaces="$(Vsix2010)" XmlInputPath="$(IntermediateVsixManifest)" Query="/vs:Vsix/vs:Identifier/vs:Author/text()">
			<Output TaskParameter="Result" PropertyName="VsixAuthor" />
		</XmlPeek>
		<XmlPeek Condition="'$(VsixAuthor)' == ''" Namespaces="$(Vsix2011)" XmlInputPath="$(IntermediateVsixManifest)" Query="/vs:PackageManifest/vs:Metadata/vs:Identity/@Publisher">
			<Output TaskParameter="Result" PropertyName="VsixAuthor" />
		</XmlPeek>
	</Target>

	<Target Name="VsixThisAssembly" AfterTargets="_VsixGenerateThisAssembly"
			Condition="'$(Language)' == 'C#' Or '$(Language)' == 'VB'">
		<ItemGroup>
			<Compile Include="$(ThisVsixInfoFile)" />
		</ItemGroup>
	</Target>

	<Target Name="_VsixGenerateThisAssembly" AfterTargets="VsixInfo"
			Condition="'$(Language)' == 'C#' Or '$(Language)' == 'VB'"
			Inputs="$(IntermediateVsixManifest)" Outputs="$(ThisVsixInfoFile)">

		<PropertyGroup>
			<_ThisVsixInfoContent>$([System.IO.File]::ReadAllText('$(MSBuildThisFileDirectory)MSBuilder.ThisAssembly.Vsix$(DefaultLanguageSourceExtension).pp'))</_ThisVsixInfoContent>

			<!-- The $NamespaceDefine$ replacement is turned into the GLOBALNAMESPACE define if the ThisAssemblyNamespace isn't empty.  -->
			<_ThisVsixInfoContent Condition="'$(ThisAssemblyNamespace)' != ''">$(_ThisVsixInfoContent.Replace('$NamespaceDefine$', 'LOCALNAMESPACE'))</_ThisVsixInfoContent>
			<_ThisVsixInfoContent Condition="'$(ThisAssemblyNamespace)' == ''">$(_ThisVsixInfoContent.Replace('$NamespaceDefine$', 'GLOBALNAMESPACE'))</_ThisVsixInfoContent>
			<!-- $(GitThisAssemblyMetadataDefine) comes from GitInfo and determines whether [AssemblyMetadata] attributes are emitted too -->
			<_ThisVsixInfoContent>$(_ThisVsixInfoContent.Replace('$MetadataDefine$', '$(GitThisAssemblyMetadataDefine)'))</_ThisVsixInfoContent>

			<_ThisVsixInfoContent Condition="'$(ThisAssemblyNamespace)' != ''">$(_ThisVsixInfoContent.Replace('RootNamespace.', '$(ThisAssemblyNamespace).'))</_ThisVsixInfoContent>
			<_ThisVsixInfoContent Condition="'$(ThisAssemblyNamespace)' == ''">$(_ThisVsixInfoContent.Replace('RootNamespace.', ''))</_ThisVsixInfoContent>

			<_ThisVsixInfoContent>$(_ThisVsixInfoContent.Replace('_RootNamespace_', '$(ThisAssemblyNamespace)'))</_ThisVsixInfoContent>

			<!-- Actual exposed values here -->
			<_ThisVsixInfoContent>$(_ThisVsixInfoContent.Replace('$VsixID$', '$(VsixID)'))</_ThisVsixInfoContent>
			<_ThisVsixInfoContent>$(_ThisVsixInfoContent.Replace('$VsixVersion$', '$(VsixVersion)'))</_ThisVsixInfoContent>
			<_ThisVsixInfoContent>$(_ThisVsixInfoContent.Replace('$VsixName$', '$(VsixName)'))</_ThisVsixInfoContent>
			<_ThisVsixInfoContent>$(_ThisVsixInfoContent.Replace('$VsixDescription$', '$(VsixDescription)'))</_ThisVsixInfoContent>
			<_ThisVsixInfoContent>$(_ThisVsixInfoContent.Replace('$VsixAuthor$', '$(VsixAuthor)'))</_ThisVsixInfoContent>
		</PropertyGroup>

		<WriteLinesToFile File="$(ThisVsixInfoFile)" Lines="$(_ThisVsixInfoContent)" Overwrite="true" />
	</Target>

</Project>
